Question 001
Failed to connect to github.com port 443:connection timed out
--Method: Cancel global proxy
git config --global --unset http.proxy
git config --global --unset https.proxy

Question 002
 ! [remote rejected] master -> master (push declined due to email privacy restrictions)
error: failed to push some refs to 'https://github.com/'
--Method: Github setting->emails:
Uncheck the Block command line pushes that expose my email

Question 003
! [rejected]        master -> master (fetch first)
error: failed to push some refs to 'github.com:AfraHu/momoStudy.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
--Method: 
Basically, you have to merge those new initialized files with your work. 
git pull fetches and merges for you. 
"$git pull origin master" to merge files, then "$git push origin master"
The error possibly comes because of the different structure of the code that you are committing and that present on GitHub. 
It creates conflicts.

Question 003
Understanding merge conflicts
Merging and conflicts are a common part of the Git experience. 
Conflicts in other version control tools like SVN can be costly and time-consuming. 
Git makes merging super easy. Most of the time, Git will figure out how to automatically integrate new changes.
Conflicts generally arise when two people have changed the same lines in a file, 
or if one developer deleted a file while another developer was modifying it. 
In these cases, Git cannot automatically determine what is correct. 
Conflicts only affect the developer conducting the merge, the rest of the team is unaware of the conflict. 
Git will mark the file as being conflicted and halt the merging process. 
It is then the developers' responsibility to resolve the conflict.